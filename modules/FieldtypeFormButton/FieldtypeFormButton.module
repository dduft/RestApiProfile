<?php namespace ProcessWire;

/**
 * ProcessWire Text Fieldtype
 *
 * Basic Field that stores text, typically a single line.
 *
 * For documentation about the fields used in this class, please see:
 * /wire/core/Fieldtype.php
 *
 * ProcessWire 3.x, Copyright 2016 by Ryan Cramer
 * https://processwire.com
 *
 *
 */

class FieldtypeFormButton extends FieldtypeText {

	public static function getModuleInfo() {
		return array(
			'title' => 'Custom Form Button',
			'version' => 205,
			'summary' => 'Field that stores a single line of text',
			'permanent' => false,
			);
	}

	/**
	 * Are text formatters allowed for this Fieldtype?
	 *
	 * Descending classes can override with the allowTextFormatters(false) method.
	 *
	 */
	private $allowTextFormatters = true;

	/**
	 * Initialize the Text Fieldtype
	 *
	 */
	public function init() {
		parent::init();
	}

	/**
	 * Return all Fieldtypes derived from FieldtypeText, which we will consider compatible
	 *
	 */
	public function ___getCompatibleFieldtypes(Field $field) {
		$fieldtypes = $this->wire(new Fieldtypes());
		foreach($this->wire('fieldtypes') as $fieldtype) {
			if($fieldtype instanceof FieldtypeFormButton) {
				$fieldtypes->add($fieldtype);
			} else {
				$className = $fieldtype->className();
				if($className == 'FieldtypeSelector') $fieldtypes->add($fieldtype);
			}
		}
		return $fieldtypes;
	}

	/**
	 * Return the fields required to configure an instance of FieldtypeText
	 *
	 */
	public function ___getConfigInputfields(Field $field) {

		$inputfields = parent::___getConfigInputfields($field);

		$modules = $this->wire('modules');

		$f = $modules->get('InputfieldSelect');
		$f->attr('name', 'inputfieldClass');
		$f->label = $this->_('What kind of button do you have?');
		//$f->description = $this->_('');

		foreach($modules as $module) {
			if(strpos($module->className(), 'Inputfield') !== 0) continue;
			if($module instanceof ModulePlaceholder) {
				$module = $modules->getModule($module->className(), array('noInit' => true));
			}
			if($module instanceof InputfieldFormButton) {
				$moduleInfo = $module->getModuleInfo();

				$f->addOption($module->className(), $moduleInfo['title']);
			}
		}
		$value = $field->get('inputfieldClass');
		if(!$value) $value = 'InputfieldFormButton';
		$f->attr('value', $value);
		$inputfields->add($f);


		return $inputfields;
	}
}
